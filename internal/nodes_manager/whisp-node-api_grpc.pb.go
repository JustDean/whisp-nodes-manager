// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: api/whisp-node-api.proto

package nodes_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WhispNode_HostChat_FullMethodName = "/WhispNode/HostChat"
	WhispNode_DropChat_FullMethodName = "/WhispNode/DropChat"
	WhispNode_NodeInfo_FullMethodName = "/WhispNode/NodeInfo"
)

// WhispNodeClient is the client API for WhispNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhispNodeClient interface {
	HostChat(ctx context.Context, in *HostChatRequest, opts ...grpc.CallOption) (*Blank, error)
	DropChat(ctx context.Context, in *DropChatRequest, opts ...grpc.CallOption) (*Blank, error)
	NodeInfo(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*NodeInfoResponse, error)
}

type whispNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewWhispNodeClient(cc grpc.ClientConnInterface) WhispNodeClient {
	return &whispNodeClient{cc}
}

func (c *whispNodeClient) HostChat(ctx context.Context, in *HostChatRequest, opts ...grpc.CallOption) (*Blank, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Blank)
	err := c.cc.Invoke(ctx, WhispNode_HostChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whispNodeClient) DropChat(ctx context.Context, in *DropChatRequest, opts ...grpc.CallOption) (*Blank, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Blank)
	err := c.cc.Invoke(ctx, WhispNode_DropChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whispNodeClient) NodeInfo(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*NodeInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeInfoResponse)
	err := c.cc.Invoke(ctx, WhispNode_NodeInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhispNodeServer is the server API for WhispNode service.
// All implementations must embed UnimplementedWhispNodeServer
// for forward compatibility.
type WhispNodeServer interface {
	HostChat(context.Context, *HostChatRequest) (*Blank, error)
	DropChat(context.Context, *DropChatRequest) (*Blank, error)
	NodeInfo(context.Context, *Blank) (*NodeInfoResponse, error)
	mustEmbedUnimplementedWhispNodeServer()
}

// UnimplementedWhispNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWhispNodeServer struct{}

func (UnimplementedWhispNodeServer) HostChat(context.Context, *HostChatRequest) (*Blank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostChat not implemented")
}
func (UnimplementedWhispNodeServer) DropChat(context.Context, *DropChatRequest) (*Blank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropChat not implemented")
}
func (UnimplementedWhispNodeServer) NodeInfo(context.Context, *Blank) (*NodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeInfo not implemented")
}
func (UnimplementedWhispNodeServer) mustEmbedUnimplementedWhispNodeServer() {}
func (UnimplementedWhispNodeServer) testEmbeddedByValue()                   {}

// UnsafeWhispNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhispNodeServer will
// result in compilation errors.
type UnsafeWhispNodeServer interface {
	mustEmbedUnimplementedWhispNodeServer()
}

func RegisterWhispNodeServer(s grpc.ServiceRegistrar, srv WhispNodeServer) {
	// If the following call pancis, it indicates UnimplementedWhispNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WhispNode_ServiceDesc, srv)
}

func _WhispNode_HostChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhispNodeServer).HostChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhispNode_HostChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhispNodeServer).HostChat(ctx, req.(*HostChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhispNode_DropChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhispNodeServer).DropChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhispNode_DropChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhispNodeServer).DropChat(ctx, req.(*DropChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhispNode_NodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhispNodeServer).NodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhispNode_NodeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhispNodeServer).NodeInfo(ctx, req.(*Blank))
	}
	return interceptor(ctx, in, info, handler)
}

// WhispNode_ServiceDesc is the grpc.ServiceDesc for WhispNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WhispNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WhispNode",
	HandlerType: (*WhispNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HostChat",
			Handler:    _WhispNode_HostChat_Handler,
		},
		{
			MethodName: "DropChat",
			Handler:    _WhispNode_DropChat_Handler,
		},
		{
			MethodName: "NodeInfo",
			Handler:    _WhispNode_NodeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/whisp-node-api.proto",
}
