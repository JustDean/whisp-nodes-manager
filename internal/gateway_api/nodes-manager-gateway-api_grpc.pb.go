// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: api/nodes-manager-gateway-api.proto

package gateway_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GatewayApi_HostChat_FullMethodName  = "/GatewayApi/HostChat"
	GatewayApi_DropChat_FullMethodName  = "/GatewayApi/DropChat"
	GatewayApi_ListChats_FullMethodName = "/GatewayApi/ListChats"
	GatewayApi_JoinChat_FullMethodName  = "/GatewayApi/JoinChat"
)

// GatewayApiClient is the client API for GatewayApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayApiClient interface {
	HostChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*ChatConnectionDataResponse, error)
	DropChat(ctx context.Context, in *ChatCredentials, opts ...grpc.CallOption) (*DropChatResponse, error)
	ListChats(ctx context.Context, in *ListChatsRequest, opts ...grpc.CallOption) (*ListChatsResponse, error)
	JoinChat(ctx context.Context, in *JoinChatRequest, opts ...grpc.CallOption) (*ChatConnectionDataResponse, error)
}

type gatewayApiClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayApiClient(cc grpc.ClientConnInterface) GatewayApiClient {
	return &gatewayApiClient{cc}
}

func (c *gatewayApiClient) HostChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*ChatConnectionDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatConnectionDataResponse)
	err := c.cc.Invoke(ctx, GatewayApi_HostChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayApiClient) DropChat(ctx context.Context, in *ChatCredentials, opts ...grpc.CallOption) (*DropChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DropChatResponse)
	err := c.cc.Invoke(ctx, GatewayApi_DropChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayApiClient) ListChats(ctx context.Context, in *ListChatsRequest, opts ...grpc.CallOption) (*ListChatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChatsResponse)
	err := c.cc.Invoke(ctx, GatewayApi_ListChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayApiClient) JoinChat(ctx context.Context, in *JoinChatRequest, opts ...grpc.CallOption) (*ChatConnectionDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatConnectionDataResponse)
	err := c.cc.Invoke(ctx, GatewayApi_JoinChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayApiServer is the server API for GatewayApi service.
// All implementations must embed UnimplementedGatewayApiServer
// for forward compatibility.
type GatewayApiServer interface {
	HostChat(context.Context, *CreateChatRequest) (*ChatConnectionDataResponse, error)
	DropChat(context.Context, *ChatCredentials) (*DropChatResponse, error)
	ListChats(context.Context, *ListChatsRequest) (*ListChatsResponse, error)
	JoinChat(context.Context, *JoinChatRequest) (*ChatConnectionDataResponse, error)
	mustEmbedUnimplementedGatewayApiServer()
}

// UnimplementedGatewayApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayApiServer struct{}

func (UnimplementedGatewayApiServer) HostChat(context.Context, *CreateChatRequest) (*ChatConnectionDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostChat not implemented")
}
func (UnimplementedGatewayApiServer) DropChat(context.Context, *ChatCredentials) (*DropChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropChat not implemented")
}
func (UnimplementedGatewayApiServer) ListChats(context.Context, *ListChatsRequest) (*ListChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChats not implemented")
}
func (UnimplementedGatewayApiServer) JoinChat(context.Context, *JoinChatRequest) (*ChatConnectionDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChat not implemented")
}
func (UnimplementedGatewayApiServer) mustEmbedUnimplementedGatewayApiServer() {}
func (UnimplementedGatewayApiServer) testEmbeddedByValue()                    {}

// UnsafeGatewayApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayApiServer will
// result in compilation errors.
type UnsafeGatewayApiServer interface {
	mustEmbedUnimplementedGatewayApiServer()
}

func RegisterGatewayApiServer(s grpc.ServiceRegistrar, srv GatewayApiServer) {
	// If the following call pancis, it indicates UnimplementedGatewayApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GatewayApi_ServiceDesc, srv)
}

func _GatewayApi_HostChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayApiServer).HostChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayApi_HostChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayApiServer).HostChat(ctx, req.(*CreateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayApi_DropChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayApiServer).DropChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayApi_DropChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayApiServer).DropChat(ctx, req.(*ChatCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayApi_ListChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayApiServer).ListChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayApi_ListChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayApiServer).ListChats(ctx, req.(*ListChatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayApi_JoinChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayApiServer).JoinChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayApi_JoinChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayApiServer).JoinChat(ctx, req.(*JoinChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayApi_ServiceDesc is the grpc.ServiceDesc for GatewayApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GatewayApi",
	HandlerType: (*GatewayApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HostChat",
			Handler:    _GatewayApi_HostChat_Handler,
		},
		{
			MethodName: "DropChat",
			Handler:    _GatewayApi_DropChat_Handler,
		},
		{
			MethodName: "ListChats",
			Handler:    _GatewayApi_ListChats_Handler,
		},
		{
			MethodName: "JoinChat",
			Handler:    _GatewayApi_JoinChat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/nodes-manager-gateway-api.proto",
}
